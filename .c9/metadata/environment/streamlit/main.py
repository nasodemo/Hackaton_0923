{"changed":true,"filter":false,"title":"main.py","tooltip":"/streamlit/main.py","value":"import streamlit as st\nimport pandas as pd\n\n\n\nimport openai\nimport streamlit as st\nfrom streamlit_chat import message\nfrom streamlit_autorefresh import st_autorefresh\nopenai.api_key = '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'\n\nlanguage = st.selectbox('Choose Language', [\n    'ENG',\n    '한국어'\n])\nst.write('You selected:', language)\nst.header(\"🤖OttugiGPT-3 (Demo)\")\n\n#### 기본 변수 공간 선언 ####\nif 'language' not in st.session_state or st.session_state['language'] != language:\n    st.session_state['language'] = language\n\nif 'generated' not in st.session_state:\n    # st.session_state['generated'] = []\n    st.session_state['generated'] = 'start'\n \nif 'past' not in st.session_state:\n    st.session_state['past'] = []\n##################\n    \n\ndef generate_response(user_input, prompt): # gpt로 답변 만들기\n    response = openai.ChatCompletion.create(\n    model=\"gpt-3.5-turbo\",\n    # model=\"gpt-4-0613\",\n    messages=[\n        {\"role\": \"system\", \"content\": prompt},\n        {\"role\": \"user\", \"content\": user_input},\n    ],\n    # max_token=200,\n    # stop=None,\n    # temperature=0,\n    # top_p=1,\n    )\n \n    message = response.choices[0].message.content\n    return message\n    \ndef Chat_message(generated, key): # 답변 설정\n    message(generated, \n    key=key, \n    avatar_style=\"adventurer\", # 아이콘 변경시 오른쪽 문서를 참고할 것 https://docs.streamlit.io/library/api-reference/chat/st.chat_message\n    seed=123,)\n    \ndef Display(user_input):\n    ## Manual part\n    if user_input == \"레시피 알려줘\":\n        output = \"김태욱의 답변 ㅎㅎ: 라면에 치즈를 넣어보세요!\"\n    \n    ## GPT Part\n    else: \n        prompt = \"You are a counselor for Ottogi(오뚜기 in korean) food company. Talk shorter than normal.\"\\\n        f\"You should use {st.session_state['language']} for this customer\"\\\n        \"Below things are history of your chat\"\\\n        f\"{st.session_state['generated']}\"\\\n        f\"{st.session_state['past']}\"\n        output = generate_response(user_input, prompt)\n    st.session_state.past.append(user_input)\n    st.session_state.generated.append(output)\n    st_autorefresh(interval=5*10, key=\"dataframerefresh\")\n\n## Intro Part\n# st.text(f\"{st.session_state['generated']}\")\nif st.session_state['generated'] == []:\n    \n    if st.session_state['language'] == \"ENG\":\n        output = \"I'm master of food~ \\n Ask EVERYTHING for your dish!\"\n    elif st.session_state['language'] == \"한국어\":\n        output = \"안녕하세요! 백종원급 음식 챗봇 오카오봇입니다! \\n 즉석 식품에 대해 무엇이든 물어보세요!\"\n    st.session_state.generated.append(output)\n\n## Display Part\nif st.session_state['generated']:\n    Chat_message(st.session_state[\"generated\"][0], 'start_use')\n    for i in range(len(st.session_state['generated'])-1):\n        message(st.session_state['past'][i], is_user=True, key=str(i) + '_user')\n        Chat_message(st.session_state[\"generated\"][i+1], str(i+1))\n\n\n# Expected Questions\n    \ncol1, col2 = st.columns(2, gap=\"small\")\nwith col1:\n    if st.button(\"Do you have any preference of food?\", type=\"secondary\"):\n        Display(\"음식 선호 리스트 보여줘\")\n    \nwith col2:\n    if st.button(\"Do you have any dispreference of food?\", type=\"secondary\"):\n        Display(\"음식 불호 리스트 보여줘\")\n\n## 답변 전송란\nwith st.form('form', clear_on_submit=True):\n    \n    if st.session_state['language'] == \"ENG\":\n        Intro = \"I'm master of food~ \\n Ask EVERYTHING for your dish!\"\n    elif st.session_state['language'] == \"한국어\":\n        Intro = \"안녕하세요! 백종원급 음식 챗봇 오카오봇입니다! \\n 즉석 식품에 대해 무엇이든 물어보세요!\"\n        \n    user_input = st.text_input(f'{Intro}: ', '', key='input')\n    submitted = st.form_submit_button('Send') # form 아이콘 변경 할 것\n        \n## generated handle part\nif user_input and submitted: \n    Display(user_input)\n# 검증용 코드\n# if st.session_state['generated']:\n    \n#     st.text(\"{st.session_state['generated']}\")\n#     st.text(st.session_state['past'])\n\n##################################","undoManager":{"mark":-2,"position":2,"stack":[[{"start":{"row":73,"column":36},"end":{"row":73,"column":43},"action":"remove","lines":["'start'"],"id":4868,"ignore":true},{"start":{"row":73,"column":36},"end":{"row":73,"column":37},"action":"insert","lines":["["]}],[{"start":{"row":73,"column":37},"end":{"row":73,"column":38},"action":"insert","lines":["]"],"id":4869,"ignore":true}],[{"start":{"row":73,"column":39},"end":{"row":74,"column":38},"action":"remove","lines":["","    st.session_state['generated'] = []"],"id":4870,"ignore":true}]]},"ace":{"folds":[],"scrolltop":570.5461608886724,"scrollleft":0,"selection":{"start":{"row":48,"column":4},"end":{"row":48,"column":4},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":32,"state":"start","mode":"ace/mode/python"}},"timestamp":1695401403865}